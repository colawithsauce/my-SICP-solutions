* Exercise 2.77
The generic table should likes follow:
|           | rectangular    | polar           | complex   |
| real-part | real-part-rect | real-part-polar | real-part |
| ...       |                |                 |           |

When call real-part to a complex data, we first call `apply-generic` to complex, and would pass the untagged data (and which were also itself tagged as "rectangular" or "polar") to procedure `apply-generic`, which should dispatch to `real-part-rect` or `real-part-polar`.

In conclusion, there are totally 2 times that the `apply-generic` to be called. And dispatched to `real-part` itself at the first time, and `real-part-rect` at the second time.
* Exercise 2.78
#+begin_src racket
#lang sicp
(define (attach-tag type-tag contents)
  (if (number? contents)
      contents
      (cons type-tag contents)))
(define (type-tag datum)
  (cond ((number? datum) 'scheme-number)
        ((pair? datum) (car datum))
        (else (error "bad datum: TYPE-TAG" datum))))
(define (contents datum)
  (cond ((number? datum) datum)
        ((pair? datum) (cdr datum))
        (else (error "bad datum: CONTENTS" datum))))
#+end_src
And we needn't modify the `scheme-number` package to make the system work, because the tag wouldn't really tag the number as `scheme-number` but to just keep its origin structure.
* Exercise 2.79
#+begin_src racket
#lang sicp
(define (rational-equ? a b)
  (= (* (numerator a) (denominator b))
     (* (numerator b) (denominator a))))
(define (complex-equ? a b)
  (and (= (real-part a) (real-part b))
       (= (imag-part a) (imag-part b))))
;; Install it
(put 'equ? '(scheme-number scheme-number) =)
(put 'equ? '(rational rational) rational-equ?)
(put 'equ? '(complex complex) complex-equ?)
#+end_src
* Exercise 2.80
It's straightforward
#+begin_src racket
(define (=zero? x) (apply-generic '=zero? x))

;; add into scheme-number-package
(put '=zero? 'scheme-number (lambda (x) (= x 0)))

;; add into rational-number-package
(put '=zero? 'rational-number
     (lambda (x) (= (numer x) 0)))

;; add into complex-number-package
(put '=zero? 'complex-number
     (lambda (x) (= (real-part x) (imag-part x) 0)))
#+end_src
* Exercise 2.81
a) It would lead to infinity loop, because the procedure would try to convert complex to complex over and over again.
b) No, he didn't solve the problem.
c) Just add a clause, if `proc` was found, apply it, else if the arguments have same type, raise an error, else try coercion.
* Exercise 2.82
In this case, if there is some columns like `(complex rational complex)`, and `(complex number complex)` was given, the correct answer wouldn't be yielded. The procedure would only try `(complex complex complex)` and `(number number number)` (which is impossible although).
* Exercise 2.83
#+begin_src racket
(define (install-integer)
  (define (raise x)
    (make-rational x 1))
  (put 'raise '(scheme-number) raise))
(define (install-rational x)
  (define (raise x)
    (make-real (/ (numerator x) (denominator x))))
  (put 'raise '(rational) raise))
(define (install-real)
  (define (raise x)
    (make-complex-rect x 0))
  (put 'raise '(real) raise))
(define (install-complex)
  (define (raise x)
    (error "bad call -- RAISE COMPLEX" x))
  (put 'raise '(complex) raise))
(define (raise x)
  (apply-generic 'raise x))
#+end_src
* Exercise 2.84
Note that: Only `apply-generic` takes tagged data as arguments.
#+begin_src racket
(define coercion-hierarchy '(integer rational real complex))
(define (higher-coercion? typeA typeB)
  (if (and (symbol? typeA) (symbol? typeB))
      (let ((restA (memq typeA coercion-hierarchy))
            (restB (memq typeB coercion-hierarchy)))
        (if (memq typeA restB) true false)))
  (error "bad arguments" (list typeA typeB)))
(define (apply-generic op . args)
  (let ((type-tags (map type-tag args)))
    (let ((proc (get op type-tags)))
      (if proc (apply proc (map contents args))
          (if (= (length args) 2)
              (let ((type1 (car type-tags))
                    (type2 (cadr type-tags))
                    (a1 (car args))
                    (a2 (cadr args)))
                (cond ((higher-coercion? type1 type2)
                       (apply-generic a1 (raise a2)))
                      ((higher-coercion? type2 type1)
                       (apply-genric (raise a1) a2))
                      (else (error "No method for these types" (list op args)))))
              (error "No method for these types" (list op args)))))))
#+end_src
* Exercise 2.85
skip.
* Exercise 2.86
